처음 만들면서


유전알고리즘의 기본적인 개념들을 youtube에 올라와 있는 간단한 영상들과 몇몇 블로그와 위키피디아를 통해 학습함.
코드 처음 완성했을 시 시스템 stack에 너무 많은 저장공간을 사용하게 되어 segmentation fault가 떴음. 이 메모리 사용량을 줄이니 문제없이 돌아가기 시작함
메모리 관리의 필요성을 절실히 느낌

Ver1.0
Setting
한 세대는 50개의 DNA들로 이루어져있고, 상위 5개만 살아남는다.
좌표를 전부 가능한 범위 내 랜덤으로 초기화한다.
Making Child(Generation)
45명의 자식들은 부모들의 각 숫자들 중 하나를 선택하여 생성된다.
Mutate
45명의 새로운 자식들 중 랜덤하게 2개를 선택하여 이중 한 값을 각각 랜덤한 값으로 바꿔놓는다.
Fitness
이전에 만들어놓은 경계선 따기 프로그램을 이용한 결과와 선들을 그린 결과의 이미지랑 픽셀의 RGB값의 차이를 비교한다.
차이가 적을수록 더욱 목표에 가깝다고 설정한다.

*이 이후 바뀐점만 메모한다
Ver1.1
Making Child(Generation)
45명의 자식들은 두 부모중 어느 파트부터 다른 부모에게 받을지 선택한다.
par1  11111111111111
par2  00000000000000
child 11111111111000
이와 같은 형식이다.
Mutate
1000*4*45개의 값들 중에서 1/1000의 확률로 값을 변이시킨다.

Ver2.0
Setting
한 선분의 정보를 (시작점x, 시작점y, 끝점x, 끝점y)의 4개로 하지 않고
(시작점x, 시작점y, 끝점x, 끝점y, RGB)의 5개 값으로 설정했다.
이미지를 다른 것으로 수정하여 연산속도를 증가시킴
한 세대의 DNA 수를 100개로 늘림. 살아남는 자식은 여전히 5개

Ver3.0
Setting
모든 선분의 길이를 충분히 짧은 길이로 고정시키고, 원래 백색의 이미지에서 
한 선분이 지날때마다 RGB값을 255에서 32만큼 줄이게 만듦
따라서 각 선분에 대한 정보를 (시작점x, 시작점y, 각도(0~360))의 3개로 설정함.
이에 따라 선분의 수를 기존 1000개에서 새로 2000개로 늘렸으며,
한 세대당 자식의 수는 200개, 살아남는 DNA의 수는 50개로 크게 늘렸다.

Ver3.1
mutate 확률을 1/1000에서 1/100으로 늘림
다른 이미지를 선택해서 학습시킴.
   학습속도가 더 느려진 듯 하다.

Ver3.0(롤백)
다시 1/1000으로 되돌림. Ver3.1과 비교한다.
3.1의 3600세대보다 3.0의 3300세대가 훨씬 더 원본 이미지에 가까워졌다.

Ver3.2
이미지가 커질수록 너무 흐릿하게 나오는 경향이 있어 선분의 수를 이미지 사이즈에 맞춰 늘리도록 식을 수정함.

Ver3.3
RGB값의 차이의 합으로 Fitness를 결정했었으나, 여기서 선분이 이미 충분히 진하게 모였을 경우 빈 곳에 남은 선분들이 
지나치게 남아있는 모습을 볼 수 있었다.
이번 버전에서 RGB값 차이들의 제곱의 합으로 결정했다.

Todo:
1. 현재 윈도우의 Codeblocks를 이용하여 개발하였으나, 리눅스에서도 돌아가게끔 작업환경 갈아엎기
1-1. command에 변수 설정도 가능하게끔 구현해보자
2. 기능별로 cpp 파일을 여러개로 분리하여 개발이 더욱 편하게 구성하기
3. 코드 리팩토링 - tab indent 모두 space indent로 수정, 여는중괄호 모두 위에 붙이기 등등...
3. 속도 개선. 정렬알고리즘도 개선할 필요가 있고, 변수들을 다소 수정하여 학습 속도를 올리는 작업도 필요하다.